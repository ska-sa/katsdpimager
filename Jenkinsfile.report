#!groovy

@Library('katsdpjenkins') _

env.BRANCH_NAME = 'imager-dev'

String workdir = 'git'
String testdir = "$workdir/tests"
katsdp.stagePrepare(python2: false, python3: true)

catchError {
    stage('Generate report') {
        katsdp.simpleNode(label: 'cuda', timeout: [time: 16, unit: 'HOURS']) {
            deleteDir()
            katsdp.unpackGit()
            katsdp.unpackVenv()
            katsdp.unpackKatsdpdockerbase()
            /* Meqtrees won't run against our virtualenv, since it uses system
             * Python, so run it outside the virtualenv closure.
             */
            dir(testdir) {
                sh 'makems && mv simple.ms_p0 simple.ms'
                // makems hard-codes LOFAR antenna information; replace with MeerKAT
                sh 'rm -r simple.ms/ANTENNA && cp -a MeerKAT64_ANTENNAS simple.ms/ANTENNA'
                sh 'meqtree-pipeliner.py -c batch.tdlconf "[turbo-sim]" ms_sel.msname=simple.ms /usr/lib/python2.7/dist-packages/Cattery/Siamese/turbo-sim.py =_tdl_job_1_simulate_MS'
            }
            katsdp.virtualenv('venv3') {
                katsdp.installRequirements('git/report-requirements.txt')
                sh 'pip install --no-deps -v ./git[report]'
                sh 'pip check'
                dir(testdir) {
                    sh './images_report.py --start-channel=2 --stop-channel=4 simple.ms report'
                    sh 'cp simple.lsm.txt makems.cfg batch.tdlconf report/'
                }
            }
            publishHTML(target: [reportName: 'Test images',
                                 reportDir: "$testdir/report",
                                 reportFiles: 'index.html',
                                 keepAll: true])
            /* The working directly tends to get rather big - clean it out to
             * prevent bloating the container.
             */
            deleteDir()
        }
    }
}
katsdp.mail('bmerry@ska.ac.za')
